package com.example.app.controllers;

import java.security.SecureRandom;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

// import org.springframework.web.bind.annotation.RequestParam;

import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.example.app.configs.Middleware;
import com.example.app.models.User;
import com.example.app.repositories.UserRepository;

@Controller
@RequestMapping(path="/api/v1")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepo;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public ResponseEntity<Object> addNewUser(@RequestBody User userReq) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        // System.out.println(userReq.getName());
        User newUser = new User();

        newUser.setName(userReq.getName());
        newUser.setEmail(userReq.getUsername());
        newUser.setAddress(userReq.getAddress());
        newUser.setContactNum(userReq.getContactNum());

        // strength of encoder
        int strength = 10;
        // SecureRandom as salt generator, because it provides a cryptographically
        // strong random number.
        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder(strength, new SecureRandom());
        String encodedPassword = bCryptPasswordEncoder.encode(userReq.getPassword());

        newUser.setPassword(encodedPassword);

        userRepo.save(newUser);
        return new ResponseEntity<Object>("Account created successfully.", HttpStatus.CREATED);
        // return "Creation of user account is successful";
    }

    @PostMapping(path = "/login") // Map ONLY POST Requests
    public ResponseEntity<Object> loginUser(@RequestBody User userReq) throws UsernameNotFoundException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        // System.out.println(userReq.getName());

        try {
            User getUser = userRepo.findByEmail(userReq.getUsername());

            if (getUser == null) {
                throw new UsernameNotFoundException("User not found.");
            }

            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            boolean passwordMatch = encoder.matches(userReq.getPassword(), getUser.getPassword());

            if (getUser != null && passwordMatch) {
                //gen JWT token
                Middleware genJWT = new Middleware();
                // String token = genJWT.generateJwtToken(getUser.getUsername());
                String token = "";

                return new ResponseEntity<Object>("Login Successfully.\n Token: " + token, HttpStatus.OK);
            }
        } catch (Exception e) {
            return new ResponseEntity<Object>("Username or password is invalid.", HttpStatus.BAD_REQUEST);
        }

        return new ResponseEntity<Object>("Server ERROR.", HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepo.findAll();
    }
}
